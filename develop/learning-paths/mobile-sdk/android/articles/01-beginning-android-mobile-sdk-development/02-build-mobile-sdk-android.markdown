# Building the Liferay Mobile SDK

Once you've deployed the Guestbook portlet to your Liferay instance, you're 
ready to build the Liferay Mobile SDK. You might be asking yourself, "Why do I 
have to build it? Can't I just use the pre-built Mobile SDK that Liferay already 
provides?" Fantastic question! The reason is that the pre-built Mobile SDK 
provided by Liferay only includes classes for calling the remote services of 
Liferay's *core* portlets. Core portlets are the portlets included with every 
Liferay installation (also referred to as *out-of-the-box* portlets). Since this 
learning path calls the remote services of the Guestbook portlet developed in 
the [Liferay MVC learning path](/learning-paths/-/knowledge_base/6-2/beginning-liferay-development), 
you have to build the Mobile SDK. This is the case with any non-core portlet: 
you must build the Liferay Mobile SDK if you want to use it to call your 
portlet's remote services. Now it's time to get building! 

## Building the Mobile SDK

For the Mobile SDK Builder to generate the classes that can call a non-core 
portlet's remote services, those services must be available and accompanied by a 
Web Service Deployment Descriptor (WSDD). The Guestbook portlet's remote 
services and WSDD are generated in the Liferay MVC learning path's [last section](/learning-paths/-/knowledge_base/6-2/creating-web-services-for-your-application), 
so you don't need to generate them here. You should keep this requirement in 
mind though when developing your own portlets.

To build the Mobile SDK, you first need to download its source code. You'll do 
this by using Git to *clone* the `liferay-mobile-sdk` project from GitHub. If 
your machine isn't set up to use Git, set it up by following [these instructions](https://help.github.com/articles/set-up-git/) 
on GitHub. Once you've set up Git, navigate to the directory on your machine 
you want to download the Mobile SDK to and clone the project by running the 
following command: 

    git clone git@github.com:liferay/liferay-mobile-sdk.git

This creates the `liferay-mobile-sdk` directory on your machine and downloads 
the Mobile SDK's source code to it. Once the clone completes you can generate a 
Mobile SDK for the Guestbook portlet. The Mobile SDK contains a convenient 
command line wizard for helping you with this step. To start it, navigate to the 
`liferay-mobile-sdk` directory and issue the following command:

    ./gradlew createModule

The wizard launches and then asks you to enter some properties for your project. 
You're first asked to provide the project's `Context` property. This needs to be 
set to the context path of the Guestbook portlet's remote services. To view the 
available remote service context paths for your portal, navigate to 
[http://localhost:8080/api/jsonws](http://localhost:8080/api/jsonws). On the 
page's upper left, there's a menu for selecting the context path. Select 
*guestbook-portlet*. The UI updates to show only the remote services available 
in the selected context path. 

![Figure 1: The guestbook-portlet context path on the server.](../../images/remote-services-context.png)

The Mobile SDK Builder needs this value so that it knows what remote services to 
generate classes and methods for. Return to the terminal and enter 
`guestbook-portlet` for the `Context` property.

Next, you're asked for the build's `Package Name` property. This is the package 
path for the classes generated by the Mobile SDK Builder. Accept the default 
value of `com.liferay.mobile.android`. The last property the Mobile SDK Builder 
asks for is the `POM Description`. Technically, this is only needed if you're 
planning to publish your generated Mobile SDK to Maven. However, since it's 
required for the build to run, enter `Guestbook Portlet SDK`. The following 
screenshot shows the `Context`, `Package Name`, and `POM Description` properties 
entered in the Mobile SDK Builder: 

![Figure 2: The command line wizard for building the Mobile SDK.](../../images/mobile-sdk-build-wizard.png)

Once you enter the final property, the Mobile SDK Builder runs and generates a 
`BUILD SUCCESSFUL` message. Great! However, you're probably wondering what just 
happened.

Nick: It may be a good idea to also add the output screenshots, which actually says where the module was created to:

[http://cl.ly/image/0j3U0S3J0k1i](http://cl.ly/image/0j3U0S3J0k1i)

Obviously, the build completed successfully, but other than that it 
doesn't tell you too much. What happened is this: the Mobile SDK Builder 
generated the source classes you'll use in your Android app to interact with 
your Liferay installation's Guestbook portlet. You can find these source classes 
in the following directory of your `liferay-mobile-sdk` directory:

    modules/guestbook-portlet/android/src/gen/java

You should also note that the source classes are in the package path you 
specified during the build, with an additional directory that denotes the 
Liferay version. Therefore, the full path to the generated source classes is:

    modules/guestbook-portlet/android/src/gen/java/com/liferay/mobile/android/v62

This directory has two subdirectories that correspond to each entity in the 
Guestbook portlet: `guestbook` and `entry`. In them, you'll find the respective 
source class for each, `EntryService.java` and `GuestbookService.java`. There's 
just one last thing to take care of before you can use these classes in your 
Android app: put them in a `jar` file. 

To do this, navigate to the `modules/guestbook-portlet` directory on the command 
line and run `../../gradlew jar`. This command does two things: 

1. Generates a `jar` file with the Guestbook portlet's service classes. This is 
    in `modules/guestbook-portlet/build/libs`.

2. Generates a `jar` file for the rest of the Mobile SDK. This is in 
    `liferay-mobile-sdk/android/build/libs`.

Congratulations! You just built the Liferay Mobile SDK for the Guestbook 
portlet. Now that's an accomplishment worthy of writing down in a guestbook! All 
you need now is an Android app to install the Mobile SDK in. The next article in 
this learning path shows you how to create this app. 
