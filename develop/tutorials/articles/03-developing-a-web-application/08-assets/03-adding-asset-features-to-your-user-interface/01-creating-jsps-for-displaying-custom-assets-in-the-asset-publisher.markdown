# Creating JSPs for Displaying Custom Assets in the Asset Publisher [](id=creating-jsps-for-displaying-custom-assets-in-the-asset-publisher)

Before you proceed, you need to tie up one loose end from the previous section.
Remember that you implemented `getJspPath` methods in your 
`GuestbookAssetRenderer` and `EntryAssetRenderer` classes. These classes return 
strings containing the paths to the JSPs that the Asset Publisher should use for 
displaying the full content of the assets. The `render` method of 
`GuestbookAssetRenderer` returns `"/html/asset/guestbook/full_content.jsp"` and 
the `render` method of `EntryAssetRenderer` returns 
`"/html/asset/entry/full_content.jsp"`. It's time to create these JSPs.

In your guestbook-portlet project, create a new file called `full_content.jsp`
in the `/html/asset/guestbook` folder. This JSP will display the full
content of a guestbook asset. Add the following contents to this file:

    <%@include file="../../init.jsp"%>

    <%
    Guestbook guestbook = (Guestbook)request.getAttribute("gb_guestbook");

    guestbook = guestbook.toEscapedModel();
    %>

    <dl>
            <dt>Name</dt>
            <dd><%= guestbook.getName() %></dd>
    </dl>

In this simple JSP, you grab the guestbook object which was added as a request
attribute. Then you display the guestbook name. The `getJspPath` method of
`GuestbookAssetRenderer` added the `gb_guestbook` request attribute with the
following line:

    request.setAttribute("gb_guestbook", _guestbook);

The guestbook's `toEscapedModel` method belongs to the `GuestbookModelImpl`
class which was generated by Service Builder. This method returns a "safe"
guestbook object, i.e. a guestbook model for which each field has been
HTML-escaped. Calling `guestbook = guestbook.toEscapedModel();` before
displaying the guestbook name ensures that your JSP won't display malicious code
that's masquerading as a guestbook name.

Next, you need to create a `full_content.jsp` for for displaying the full
content of a guestbook entry asset. Create a new file called `full_content.jsp`
in the `/html/asset/entry` folder. Add the following contents to this file:

    <%@include file="../../init.jsp"%>

    <%
    Entry entry = (Entry)request.getAttribute("gb_entry");

    entry = entry.toEscapedModel();
    %>

    <dl>
            <dt>Guestbook</dt>
            <dd><%= GuestbookLocalServiceUtil.getGuestbook(entry.getGuestbookId()).getName() %></dd>
            <dt>Name</dt>
            <dd><%= entry.getName() %></dd>
            <dt>Message</dt>
            <dd><%= entry.getMessage() %></dd>
    </dl>

This JSP is almost as simple as the one for guestbooks. The only difference is
that you're displaying three fields of the guestbook entry entity as opposed to
one field of the guestbook entity.

Test out your new JSPs by clicking on one of the titles of the guestbook or 
guestbook entry asset. Your `full_content.jsp` should be rendered by the Asset 
Publisher portlet:

![Figure 1: When you click on the title for a guestbook or guestbook entry that's displayed by the Asset Publisher, your `full_content.jsp` should be displayed.](../../../images/asset-publisher-full-content.png)

By default, when displaying the full view of an asset, the Asset Publisher
displays additional links for Twitter, Facebook, and Google Plus. These links
allow you to publicize your asset on social media. The *Back* icon and the *View
in Context* link return you to the Asset Publisher's default view.