# Generating Language Properties File and Automated Translations

In this tutorial, we'll learn how Liferay facilitates generating language key
files and translating the keys to languages you want to support. In order for a
user to see a message in his own locale, the message value must be specified in
a resource bundle file with a name ending in his locale's two character code.
For example, a resource bundle file named `Language_es.properties` containing a
message property with key `welcome` must be present with a Spanish translation
of the word "Welcome". Don't worry, the Plugins SDK provides a means for you to
get translations for your default resource bundle.

<!-- Insert image and transition -->

## Translating Languages Using the Bing Translator

The Plugins SDK uses the Bing Translator service
[http://www.microsofttranslator.com/](http://www.microsofttranslator.com/) to
translate all of the resources in your Language.properties file to multiple
languages. It provides a base translation for you to start with. To create base
translations using the Bing Translator service, you'll need to do the following:

1.  Sign up for an Azure Marketplace account and register your application. Be
    sure to write down your client ID and client secret given to you for your
    application.

2.  Make sure that you have a `build.[username].properties` file in your Plugins
    SDK root directory. This `build.[username].properties` file should contain a
    reference to a Liferay bundle. If you have a Liferay Tomcat bundle, for
    example, your reference should look like this:

        app.server.dir=[Liferay Home]/tomcat-7.0.42
        auto.deploy.dir=[Liferay Home]/deploy

    `[Liferay Home]` refers to your bundle's root directory.

3.  Edit the `portal-ext.properties` file in your Liferay Home directory by
    adding the following two lines replaced with your values:

        microsoft.translator.client.id=your-[client-id]
        microsoft.translator.client.secret=your-[client-secret]

    Liferay copies the `portal-ext.properties` file from your Liferay Home
    directory to the `tomcat-[version]/webapps/ROOT/WEB-INF/classes` directory
    upon startup. So either start Liferay or manually copy your
    `portal-ext.properties` file from Liferay Home to this location.

4.  Edit the `Language.properties` file of the plugin for which you'd like to
    add properties to be translated. For example, if you have a `hello-world`
    portlet in your Plugins SDK, you'd edit the following file:

        [Liferay Plugins SDK]/portlets/hello-world-portlet/docroot/WEB-INF/src/content/Language.properties

    You can add properties, remove properties, or edit properties. However,
    translations will *not* be generated for existing properties. 

5.  Run `ant build-lang` from the plugin directory of the plugin for which you'd
    like to generate translations. For example, in the case of the `hello-world`
    portlet example, you'd run `ant build-lang` from the `[Liferay Plugins
    SDK]/portlets/hello-world-portlet` directory.

When the build completes, you'll find the generated files with all of the
translations in the same folder as your `Language.properties` file.

---

 ![Note](../../images/tip-pen-paper.png) **Note:** Since translations aren't
 generated for existing properties, use two steps if you need to edit existing
 properties. First, remove the properties from `Language.properties` and run
 `ant build-lang` to remove the properties from all the other resource bundles.
 Then re-add the properties with new values and run `ant build-lang` again. Now
 the Microsoft Translator should generate new translations for your properties.

---

---

 ![Note](../../images/tip-pen-paper.png) **Note:** If you're Mavenizing your
 portlet, make sure to copy your `content` folder into your portlet's
 `src/main/webapp/WEB-INF/classes` folder. 

---

By using the Plugins SDK's language building capability, you can keep all
created translations synchronized with your default `Language.properties`. You
can run it any time during development. It significantly reduces the time spent
on the maintenance of translations. However, remember that a *machine*
translation is generated by the Microsoft Translator. Machine translations can
often come across as rude or (unintentionally) humorous. Sometimes they are
simply inaccurate. Someone fluent in each language should review the
translations before the translations are deployed to a production environment. 

Now that you know how to create a shared resource bundle and how to generate
translations, let's consider why you may need to use separate resource bundles
for each portlet. For example, to localize the title and description of each of
your plugin's Control Panel-enabled portlets, you must use separate resource
bundles. We'll show you how to implement them. 
